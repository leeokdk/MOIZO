package com.moim.web;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.List;
import java.util.Set;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.groups.Default;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.moim.common.valid.Modify;
import com.moim.dao.IHobbyDao;
import com.moim.dao.ILocationDao;
import com.moim.dao.IUserLikeDao;
import com.moim.exception.BizDuplicateKeyException;
import com.moim.exception.BizNotEffectedException;
import com.moim.exception.BizNotFoundException;
import com.moim.service.IManagerNoticeService;
import com.moim.service.IMoimService;
import com.moim.vo.HobbyVO;
import com.moim.vo.LocationVO;
import com.moim.vo.LoginVO;
import com.moim.vo.ManagerNoticeSearchVO;
import com.moim.vo.ManagerNoticeVO;
import com.moim.vo.MoimSearchVO;
import com.moim.vo.MoimVO;
import com.moim.vo.UserLikeVO;


/**
 * 
 * @author ok
 * @since 2021.07.19 -> 수정(준오) 2021.07.21
 */
@Controller
public class MoimController {

	@Value("#{uploadPath['file.upload.path']}")
	private String absolutePath;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Inject
	IManagerNoticeService managerNoticeService;
	
	@Inject
	IMoimService moimService;
	
	@Inject
	IHobbyDao hobbyDao;
	
	@Inject
	ILocationDao locationDao;
	
	@Inject
	IUserLikeDao userLikeDao;
	
	@ModelAttribute("hobbyList")
	public List<HobbyVO> hobbyList(){
		List<HobbyVO> hobbyList = hobbyDao.getHobbyCode();
		return hobbyList;
	}
	@ModelAttribute("locationList")
	public List<LocationVO> locationList(){
		List<LocationVO> locationList = locationDao.getBigLocation();
		return locationList;
	}
	
	
	@RequestMapping("/moim/moimList")
	public String searchMoim(@ModelAttribute("searchVO") MoimSearchVO searchVO, Model model, HttpServletRequest req) {
		logger.debug("moimSearchVO", searchVO);
		model.addAttribute("moimSearchVO", searchVO);
		List<MoimVO> moimList = moimService.getMoimList(searchVO);
		model.addAttribute("moimList", moimList);
		
		HttpSession session = req.getSession();
		LoginVO session_loginVO = (LoginVO)session.getAttribute("USER_INFO");
		String session_id = session_loginVO.getUserId();
		List<UserLikeVO> likeList = userLikeDao.getUserLike(session_id);
		model.addAttribute("likeList", likeList);
		return "moim/moimList";
	}

	@RequestMapping("/moim/moimMake")
	public String createMoim(@ModelAttribute("moim") MoimVO moim, Model model) {
		logger.debug("moim", moim);
		return "moim/moimForm";
	}
	
	@RequestMapping("/moim/moimRegist")
	public String moimRegist(@ModelAttribute("moim") MoimVO moim
			,BindingResult errors , Model model, @RequestParam("upload_img") MultipartFile file) {
		logger.debug("moimVO={}", moim );
		if(errors.hasErrors()) {
			System.out.println("에러났음");
			return "moim/moimForm";
		}
		try {
			moimService.registMoim(moim);
			System.out.println(file.getOriginalFilename());
			System.out.println(file.getSize());
			String fileName = null;
			if(file.getSize() != 0) {
				//파일관련
				fileName = moim.getMoimCode()+'_'+ file.getOriginalFilename();
				System.out.println(fileName);
				File uploadPath = new File(absolutePath + "/moimImage", fileName);
				// 해당 경로 없으면 경로 만들기
				System.out.println(absolutePath);
				if (!new File(absolutePath + "/moimImage").exists()) {
					new File(absolutePath + "/moimImage").mkdirs();
					System.out.println(absolutePath+"/moimImage를 만들었습니다.");
				}
				// 파일 업로드 함.
				FileCopyUtils.copy(file.getBytes(), uploadPath);
				
				// 이미지 파일 권한변경
				int permissionsCode = 777;
			    String targetPath = uploadPath.getPath(); // 디렉토리만 넣을 경우 디렉토리만 동작
			    File targetFile = new File(targetPath);
			    // 모든권한을 제거하고 시작    
			    targetFile.setReadable(false, false);
			    targetFile.setWritable(false, false);
			    targetFile.setExecutable(false, false);
			    if(targetFile.exists()) {
			        if(permissionsCode == 777) {
			            // JDK 7 이상
			            Path path = Paths.get(targetPath);
			            Set<PosixFilePermission> posixPermissions = PosixFilePermissions.fromString("rwxrwxrwx");
			            Files.setPosixFilePermissions(path, posixPermissions);
			        	}
			    	}
				
				fileName = "/moimImage/" + fileName;
			}
			moimService.updateMoimImage(moim, fileName);
			
		} catch (BizDuplicateKeyException edk) {
			model.addAttribute("edk", edk);
			System.out.println("아무튼 소모임 생성 실패");
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene", ene);
			System.out.println("소모임 생성 실패");
		} catch (IOException e) {
			e.printStackTrace();
			// 파일업로드 시에 io exception 이 나와서 무조건 try-catch 구문 사용하기
		}
		return "/moim/moimView";
	}
	
	/**
	 * 지역에 따른 중분류(도시)정보를 json으로 리턴 
	 * @param moim
	 * @author ok
	 * @since 2021.07.20
	 */
	@RequestMapping(path =  "/moim/locationDetail.ajax", produces= "application/json; charset=UTF-8" )
	@ResponseBody
	public List<LocationVO> locationDetail(String bigCode) {
		logger.debug("bigCode={}", bigCode);
		List<LocationVO> result =  locationDao.getLocationByParent(bigCode);
		return result;
	}
	
	@RequestMapping(path =  "/moim/locationDetail2.ajax", produces= "application/json; charset=UTF-8" )
	@ResponseBody
	public List<LocationVO> locationDetail2(String midCode) {
		logger.debug("midCode={}", midCode);
		List<LocationVO> result =  locationDao.getLocationByParent2(midCode);
		return result;
	}
	
	
	
	
	/**
	 * 좋아요 기능
	 * @author ok
	 * @since 2021.07.28
	 */
	@SuppressWarnings("null")
	@RequestMapping(path =  "/moim/userlike.ajax", produces= "application/json; charset=UTF-8" )
	@ResponseBody
	public String userlike(HttpServletRequest req, String moimCode, UserLikeVO likeVO) {
		HttpSession session = req.getSession();
		LoginVO lobj_getData = (LoginVO)session.getAttribute("USER_INFO");
		System.out.println(lobj_getData);
		String ls_getdata = lobj_getData.getUserId();
		System.out.println(ls_getdata);
		//UserLikeVO에 셋팅
		
		likeVO.setMoimCode(moimCode);
		likeVO.setUserId(ls_getdata);
		logger.debug("userLikeVO={}", likeVO);
		int result = userLikeDao.searchUserLike(likeVO);
		if(result==1) {
			userLikeDao.deleteUserLike(likeVO);
		}else {
			userLikeDao.insertUserLike(likeVO);
		}
		return "좋아용";
	}
	
	@RequestMapping("/moim/moimEdit")
	public ModelAndView moimEdit(@RequestParam("moimCode") String moimCode) {
		ModelAndView mav = new ModelAndView();
		try {
			MoimVO moim =  moimService.getMoim(moimCode);
			mav.addObject("moim", moim);
			mav.setViewName("moim/moimEdit");
		} catch (BizNotFoundException e) {
			mav.addObject("e", e);
		}
		return mav;
	}
	
	@RequestMapping("/moim/moimModify")
	public String modifyMoim(@ModelAttribute("moim")@Validated({ Default.class, Modify.class }) MoimVO moim
			,BindingResult errors , Model model) {
		logger.debug("moimVO={}", moim );
		if(errors.hasErrors()) {
			System.out.println("에러났음");
			return "moim/moimEdit";
		}
		try {
			moimService.modifyMoim(moim);
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene",ene);
		} catch (BizNotFoundException enf) {
			model.addAttribute("enf",enf);
		}
		return "moim/moimView";
	}
	
	@RequestMapping("/moim/moimDelete")
	public String removeMoim(@ModelAttribute("moim") MoimVO moim
			, Model model) {
		logger.debug("moimVO={}", moim );
		try {
			moimService.removeMoim(moim);
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene",ene);
		} catch (BizNotFoundException enf) {
			model.addAttribute("enf",enf);
		}
		return "moim/moimList";
	}

	/**
	 * 
	 * 소모임 공지 게시판리스트 분리를 위한 수정 결과
	 * 
	 * @author DNA
	 * @since 2021.07.21
	 */
	@RequestMapping("moim/moimView")
	public String viewMoim(@ModelAttribute("searchVO") ManagerNoticeSearchVO searchVO,
			@RequestParam("moimCode") String moimCode, Model model) {
		logger.debug("moimCode={}", moimCode);
		try {
			MoimVO moim = moimService.getMoim(moimCode);
			model.addAttribute("moim", moim);
			// MoimVO를 DB에서 받아서 Model에 담음

			// List<ManagerNoticeVO> 를 DB에서 받아서 Model에 담음
			List<ManagerNoticeVO> managerNoticeList = managerNoticeService.getBoardList(searchVO);
			model.addAttribute("managerNoticeList", managerNoticeList);
			
			// 모임코드를 따로 받아줌
			model.addAttribute("moimCode", moimCode);

		} catch (BizNotFoundException e) {
			model.addAttribute("e", e);

		}

		return "moim/moimView";
	}

}
