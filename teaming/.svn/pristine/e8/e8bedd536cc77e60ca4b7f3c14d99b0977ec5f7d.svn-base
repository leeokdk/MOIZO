package com.moim.web;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.List;
import java.util.Set;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.moim.common.valid.Step;
import com.moim.dao.IAttentionDao;
import com.moim.dao.IHobbyDao;
import com.moim.dao.ILocationDao;
import com.moim.exception.BizDuplicateKeyException;
import com.moim.exception.BizNotEffectedException;
import com.moim.exception.BizNotFoundException;
import com.moim.service.ILoginService;
import com.moim.service.IUserService;
import com.moim.vo.AttentionVO;
import com.moim.vo.HobbyVO;
import com.moim.vo.LocationVO;
import com.moim.vo.LoginVO;
import com.moim.vo.UserVO;

@Controller
@RequestMapping("/user")
public class UserController {
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Value("#{uploadPath['file.upload.path']}")
	private String absolutePath;
	
	@Inject
	IUserService userService;
	
	@Inject
	ILoginService loginService;
	
	@Inject
	ILocationDao locationDao;

	@Inject
	IHobbyDao hobbyDao;
	
	@Inject
	IAttentionDao attentionDao;
	
	@ModelAttribute("hobbyList")
	public List<HobbyVO> hobbyList() {
		List<HobbyVO> hobbyList = hobbyDao.getHobbyCode();
		return hobbyList;
	}

	@ModelAttribute("locationList")
	public List<LocationVO> locationList() {
		List<LocationVO> locationList = locationDao.getBigLocation();
		return locationList;
	}
	
	/*			로그인 후 개인정보 확인용 컨트롤러	 */	
	@RequestMapping("/find")
	public String findPassword(HttpServletRequest req, HttpServletResponse resp, RedirectAttributes redirectAttributes) {
		HttpSession session = req.getSession();
		session.removeAttribute("USER_INFO");
		redirectAttributes.addFlashAttribute("succesLogout", "success");
		return "redirect:/";
	}
	
	@RequestMapping("/info")
	public String getMyInfo(@RequestParam("userId") String userId, Model model) {
		try {
			UserVO user = userService.getUser(userId);
			LocationVO location = (LocationVO) locationDao.getUserLocation(user);
			model.addAttribute("userLocation", location);
			model.addAttribute("user", user);
		} catch (BizNotFoundException e) {
			e.printStackTrace();
		}
		
		return "user/info";
	}
	
	@GetMapping("/edit")
	public String userEdit(@RequestParam ("userId") String userId, Model model) {
		UserVO user = null;
		try {
			user = userService.getUser(userId);
		} catch (BizNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		model.addAttribute("user", user);
		return "user/edit";
	}
	
	@PostMapping("/modify")
	public String userEdit2(@ModelAttribute("user") @Validated({ Step.class }) UserVO user, BindingResult errors,
			Model model, @RequestParam("upload_profile") MultipartFile file, RedirectAttributes redirectAttributes) {
		if (errors.hasErrors()) {
			return "user/edit";
		}
		try {
			if (!user.getUserPic().equals("default")) {
				String fileName = user.getUserId() + "profile";
				File uploadPath = new File(absolutePath + "/userProfile", fileName);
				// 해당 경로 없으면 경로 만들기
				if (!new File(absolutePath + "/userProfile").exists()) {
					new File(absolutePath + "/userProfile").mkdirs();
				}
				// 파일 업로드 함.
				FileCopyUtils.copy(file.getBytes(), uploadPath);
				
				// 이미지 파일 권한변경
				int permissionsCode = 777;
			    String targetPath = uploadPath.getPath(); // 디렉토리만 넣을 경우 디렉토리만 동작
			    File targetFile = new File(targetPath);
			    // 모든권한을 제거하고 시작    
			    targetFile.setReadable(false, false);
			    targetFile.setWritable(false, false);
			    targetFile.setExecutable(false, false);
			    if(targetFile.exists()) {
			        if(permissionsCode == 777) {
			            // JDK 7 이상
			            Path path = Paths.get(targetPath);
			            Set<PosixFilePermission> posixPermissions = PosixFilePermissions.fromString("rwxrwxrwx");
			            Files.setPosixFilePermissions(path, posixPermissions);
			        }
			    }
			    
			    
				fileName = "/userProfile/" + fileName;
				user.setUserPic(fileName);		// default 아닐 때는 경로 저장
			}
			// 해당 유저의 유저권한 설정
			LoginVO login = new LoginVO(user.getUserId(), "GUEST", user.getUserPassword(), user.getUserName(), "NOPE", user.getUserPic());

			user.setUserRole(login.getRoleName());
			
			logger.debug("user", user);
			
			userService.modifyUser(user);
			loginService.registUserRole(login);			
			
			// 해당 유저의 취미 설정
			AttentionVO attentionVO = new AttentionVO(user.getUserId(), user.getUserHobby());
			attentionDao.insertHobby(attentionVO);		// 무결성 제약조건 : 부모인 user테이블에 값을 먼저 넣어줘야 자식테이블인 attention 테이블에 값을 넣을 수 있음.
		} catch (BizNotEffectedException ene) { // update 구문 수행시 변수들이 유효하지 않을 때
		} catch (BizNotFoundException ef) {
			ef.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (BizDuplicateKeyException e) {
			e.printStackTrace();
		}
//		model.addAttribute("resultMessageVO", resultMessageVO);
		redirectAttributes.addFlashAttribute("successJoin", "success");
		return "redirect:/";
	}
	
	@RequestMapping("/deleteUser")
	public String userDelete(HttpServletRequest req, RedirectAttributes redirectAttributes, @RequestParam("userId") String userId) {
		UserVO user;
		try {
			user = userService.getUser(userId);
			userService.removeUser(user);
		} catch (BizNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (BizNotEffectedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HttpSession session = req.getSession();
		session.removeAttribute("USER_INFO");
		redirectAttributes.addFlashAttribute("succesDelete", "success");
		return "redirect:/";
	}
}
