package com.moim.web;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.moim.dao.IHobbyDao;
import com.moim.dao.ILocationDao;
import com.moim.exception.BizDuplicateKeyException;
import com.moim.exception.BizNotEffectedException;
import com.moim.exception.BizNotFoundException;
import com.moim.service.IManagerNoticeService;
import com.moim.service.IMoimService;
import com.moim.vo.HobbyVO;
import com.moim.vo.LocationVO;
import com.moim.vo.ManagerNoticeSearchVO;
import com.moim.vo.ManagerNoticeVO;
import com.moim.vo.MoimSearchVO;
import com.moim.vo.MoimVO;


/**
 * 
 * @author ok
 * @since 2021.07.19 -> 수정(준오) 2021.07.21
 */
@Controller
public class MoimController {

	@Value("#{uploadPath['file.upload.path']}")
	private String absolutePath;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Inject
	IManagerNoticeService managerNoticeService;
	
	@Inject
	IMoimService moimService;
	
	@Inject
	IHobbyDao hobbyDao;
	
	@Inject
	ILocationDao locationDao;
	
	@ModelAttribute("hobbyList")
	public List<HobbyVO> hobbyList(){
		List<HobbyVO> hobbyList = hobbyDao.getHobbyCode();
		return hobbyList;
	}
	@ModelAttribute("locationList")
	public List<LocationVO> locationList(){
		List<LocationVO> locationList = locationDao.getBigLocation();
		return locationList;
	}
	
	
	@RequestMapping("/moim/moimList")
	public String searchMoim(@ModelAttribute("searchVO") MoimSearchVO searchVO, Model model) {
		logger.debug("moimSearchVO", searchVO);
		model.addAttribute("moimSearchVO", searchVO);
		List<MoimVO> moimList = moimService.getMoimList(searchVO);
		model.addAttribute("moimList", moimList);
		return "moim/moimList";
	}

	@RequestMapping("/moim/moimMake")
	public String createMoim(@ModelAttribute("moim") MoimVO moim, Model model) {
		logger.debug("moim", moim);
		return "moim/moimForm";
	}
	
	@RequestMapping("/moim/moimRegist")
	public String moimRegist(@ModelAttribute("moim") MoimVO moim
			,BindingResult errors , Model model, @RequestParam("upload_img") MultipartFile file) {
		logger.debug("moimVO={}", moim );
		if(errors.hasErrors()) {
			System.out.println("에러났음");
			return "moim/moimForm";
		}
		try {
			moimService.registMoim(moim);
			System.out.println(file.getOriginalFilename());
			//파일관련
			String fileName = moim.getMoimCode()+'_'+ file.getOriginalFilename();
			System.out.println(fileName);
			File uploadPath = new File(absolutePath + "/moimImage", fileName);
			// 해당 경로 없으면 경로 만들기
			System.out.println(absolutePath);
			if (!new File(absolutePath + "/moimImage").exists()) {
				new File(absolutePath + "/moimImage").mkdirs();
				System.out.println(absolutePath+"/moimImage를 만들었습니다.");
			}
			// 파일 업로드 함.
			FileCopyUtils.copy(file.getBytes(), uploadPath);
			fileName = "/moimImage/" + fileName;
			moimService.updateMoimImage(moim, fileName);
			
		} catch (BizDuplicateKeyException edk) {
			model.addAttribute("edk", edk);
			System.out.println("아무튼 소모임 생성 실패");
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene", ene);
			System.out.println("소모임 생성 실패");
		} catch (IOException e) {
			e.printStackTrace();
			// 파일업로드 시에 io exception 이 나와서 무조건 try-catch 구문 사용하기
		}
		return "/moim/moimView";
	}
	
	/**
	 * 지역에 따른 중분류(도시)정보를 json으로 리턴 
	 * @param moim
	 * @author ok
	 * @since 2017.07.20
	 */
	@RequestMapping(path =  "/moim/locationDetail.ajax", produces= "application/json; charset=UTF-8" )
	@ResponseBody
	public List<LocationVO> locationDetail(String bigCode) {
		logger.debug("bigCode={}", bigCode);
		List<LocationVO> result =  locationDao.getLocationByParent(bigCode);
		return result;
	}
	
	@RequestMapping(path =  "/moim/locationDetail2.ajax", produces= "application/json; charset=UTF-8" )
	@ResponseBody
	public List<LocationVO> locationDetail2(String midCode) {
		logger.debug("midCode={}", midCode);
		List<LocationVO> result =  locationDao.getLocationByParent2(midCode);
		return result;
	}
	
	@RequestMapping("/moim/moimEdit")
	public ModelAndView moimEdit(@RequestParam("moimCode") String moimCode) {
		ModelAndView mav = new ModelAndView();
		try {
			MoimVO moim =  moimService.getMoim(moimCode);
			mav.addObject("moim", moim);
			mav.setViewName("moim/moimEdit");
		} catch (BizNotFoundException e) {
			mav.addObject("e", e);
		}
		return mav;
	}
	
	@RequestMapping("/moim/moimModify")
	public String modifyMoim(@ModelAttribute("moim") MoimVO moim
			,BindingResult errors , Model model) {
		logger.debug("moimVO={}", moim );
		if(errors.hasErrors()) {
			System.out.println("에러났음");
			return "moim/moimEdit";
		}
		try {
			moimService.modifyMoim(moim);
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene",ene);
		} catch (BizNotFoundException enf) {
			model.addAttribute("enf",enf);
		}
		return "moim/moimView";
	}
	
	@RequestMapping("/moim/moimDelete")
	public String removeMoim(@ModelAttribute("moim") MoimVO moim
			, Model model) {
		logger.debug("moimVO={}", moim );
		try {
			moimService.removeMoim(moim);
		} catch (BizNotEffectedException ene) {
			model.addAttribute("ene",ene);
		} catch (BizNotFoundException enf) {
			model.addAttribute("enf",enf);
		}
		return "moim/moimList";
	}

	// --------------------- 모임 상세 및 Manager Notice 게시판 부분 -----------------

	/**
	 * 
	 * @param moimSearchVO
	 * @param model
	 * @return
	 * @author DNA
	 * @since 2021.07.19
	 */
	@RequestMapping("moim/moimView")
	public String viewMoim(@ModelAttribute("searchVO") ManagerNoticeSearchVO searchVO,
			@RequestParam("moimCode") String moimCode, Model model) {
		logger.debug("moimCode={}", moimCode);
		try {
			MoimVO moim = moimService.getMoim(moimCode);
			model.addAttribute("moim", moim);
			// MoimVO를 DB에서 받아서 Model에 담음

			// List<ManagerNoticeVO> 를 DB에서 받아서 Model에 담음
			List<ManagerNoticeVO> managerNoticeList = managerNoticeService.getBoardList(searchVO);
			model.addAttribute("managerNoticeList", managerNoticeList);

			// 모임코드를 따로 받아줌
			model.addAttribute("moimCode", moimCode);

			model.addAttribute("searchVO", searchVO);

			logger.debug("searchVO={}", searchVO);

		} catch (BizNotFoundException e) {
			model.addAttribute("e", e);

		}

		return "moim/moimView";
	}

	@RequestMapping("moim/moimNoticeForm")
	public String noticeForm(@ModelAttribute("moim") ManagerNoticeVO moim, Model model) {
		logger.debug("ManagerNoticeVO={}", moim);

		return "moim/moimNoticeForm";
	}

	@RequestMapping("moim/moimNoticeRegist")
	public String NoticeRegist(@RequestParam(name = "boFiles", required = false) MultipartFile[] boFiles,
			@ModelAttribute("moim") ManagerNoticeVO moim, BindingResult erros, Model model)
			throws IOException, BizNotEffectedException {

		logger.debug("ManagerNoticeVO={}", moim);

		if (erros.hasErrors()) { // 에러가 있으면
			return "moim/moimNoticeForm";
		}
		managerNoticeService.registBoard(moim);

		return "redirect:/";

	}

	@RequestMapping("moim/moimNoticeEdit")
	public String NoticeEdit(@RequestParam("mNoticeNo") int mNoticeNo, Model model) {

		try {
			ManagerNoticeVO moim = managerNoticeService.getBoard(mNoticeNo);
			model.addAttribute("moim", moim);
		} catch (BizNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "moim/moimNoticeEdit";
	}

	@PostMapping("moim/moimNoticeModify")
	public String NoticeModify(
			@ModelAttribute("moim") ManagerNoticeVO moim, BindingResult erros, Model model) {

		logger.debug("ManagerNoticeVO={}", moim);

		if (erros.hasErrors()) { // 에러가 있으면
			return "moim/moimNoticeEdit";
		}
		try {
			managerNoticeService.modifyBoard(moim);
		} catch (BizNotEffectedException | BizNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "redirect:/";

	}

	@PostMapping("moim/moimNoticeDelete")
	public String NoticeDelete(@ModelAttribute("moim") ManagerNoticeVO moim, BindingResult erros, Model model) {

		logger.debug("ManagerNoticeVO={}", moim);

		if (erros.hasErrors()) { // 에러가 있으면
			return "moim/moimView";
		}
		try {
			managerNoticeService.removeBoard(moim);
		} catch (BizNotEffectedException | BizNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "redirect:/";

	}

	@RequestMapping("moim/moimNoticeView")
	public String noticeView(@RequestParam("mNoticeNo") int mNoticeNo, Model model) {

		logger.debug("mNoticeNo={}", mNoticeNo);

		try {
			// 조회수 증가
			managerNoticeService.increaseHit(mNoticeNo);
			ManagerNoticeVO moim = managerNoticeService.getBoard(mNoticeNo);
			model.addAttribute("moim", moim);

		} catch (BizNotFoundException | BizNotEffectedException e) {
			model.addAttribute("e", e);
		}

		return "moim/moimNoticeView";
	}

	/**
	 * 
	 * @param moimIntroduce
	 * @param model
	 * @return
	 * @throws BizNotFoundException
	 * @author DNA
	 * @since 2021.07.19
	 */

	@RequestMapping("moim/moimIntroduce")
	public String IntroduceMoim(@RequestParam("moimCode") String moimCode, Model model) throws BizNotFoundException {
		MoimVO moim = moimService.getMoim(moimCode);
		model.addAttribute("moim", moim);

		return "moim/moimIntroduce";
	}

	// TODO: Tab에 사용되는 게시판 완성 시 연결하기 위한 예시

	@RequestMapping("moim/banana")
	public String aaa(@RequestParam("moimCode") String moimCode) {
		logger.debug("moimCode={}", moimCode);
		return "moim/banana";
	}

	@RequestMapping("moim/banana2")
	public String aaa2(@RequestParam("moimCode") String moimCode) {
		logger.debug("moimCode={}", moimCode);
		return "moim/banana2";
	}

}
