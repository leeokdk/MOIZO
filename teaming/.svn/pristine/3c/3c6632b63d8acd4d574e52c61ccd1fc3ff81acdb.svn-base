package com.moim.web;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.moim.dao.IHobbyDao;
import com.moim.exception.BizDuplicateKeyException;
import com.moim.exception.BizNotEffectedException;
import com.moim.exception.BizNotFoundException;
import com.moim.service.ILoginService;
import com.moim.service.IUserService;
import com.moim.vo.HobbyVO;
import com.moim.vo.LoginVO;
import com.moim.vo.UserVO;


@Controller
@SessionAttributes("user")
public class JoinController {
	
	@ModelAttribute("user")	// 모델에 이미 user가 있으면 실행이 안됌.
	public UserVO user() {
		UserVO user = new UserVO();
		return user;
	}
	
	@Inject
	IUserService userService;

	@Inject
	IHobbyDao hobbyDao;
	
	@Inject
	ILoginService loginService;
	
//	ResultMessageVO resultMessageVO = new ResultMessageVO();
	
	@ModelAttribute("hobbyList")
	public List<HobbyVO> hobbyList() {
		List<HobbyVO> hobbyList = hobbyDao.getHobyCode();
		return hobbyList;
	}

	@RequestMapping("/join/step1.wow")
	public String step1(@ModelAttribute("user") UserVO user) {
		return "join/step1";
	}
	
	@RequestMapping("/join/step2.wow")
	public String step2(@ModelAttribute("user")/*@Validated({Step1.class})*/ UserVO user, BindingResult errors) {
		if(errors.hasErrors()) {
			return "join/step1";
		}
		return "join/step2";
	}
	
	// @ModelAttribute 는 컨트롤러가 실행될 때마다 user 객체를 새로 생성 후 파라미터로 넘어온 값을 세팅하고 model에 담음
	// 그래서 step2의 아이디 비밀번호와 같은 정보들을 계속해서 넘겨주지 않은이상 스텝2의 정보들은 마지막에 regist에서  모두 null로 세팅됌.
	// -> 그래서 계속 넘겨주기위해 class 윗단에 @SessionAttributes 사용 세션에 model를 저장
	// 회원 등록하고 나면은 다시 session 값을 지우기
	// BingResult 는 유효성 검사 후 관련 에러를 저장한 객체
	@RequestMapping("/join/step3.wow")
	public String step3(@ModelAttribute("user")/*@Validated({Step2.class})*/ UserVO user, BindingResult errors) {
		if(errors.hasErrors()) {
			return "join/step2";
		}
		return "join/step3";
	}
	
	@RequestMapping("/join/regist.wow")
	public String regist(@ModelAttribute("user")/*@Validated({Step3.class})*/ UserVO user, BindingResult errors, Model model, SessionStatus sessionStatus) {
		if(errors.hasErrors()) {
			return "join/step3";
		}
		try {
			// 세션의 값들 다시 초기화
			sessionStatus.setComplete();
			// 해당 유저의 유저권한 설정
			LoginVO login = new LoginVO(user.getUserId(), "GUEST", user.getUserPassword());
			
			loginService.registUserRole(login);
			
			String userRole =  loginService.getUserRole(user.getUserId());
			user.setUserRole(userRole);
			
			// 유저 권한 세팅 된 유저 등록
			userService.registUser(user);
			// 변화가 성공 했을 때
//			resultMessageVO.setResult(true);
//			resultMessageVO.setMessage("등록 성공");
//			resultMessageVO.setTitle("등록");
//			resultMessageVO.setUrl("/user/userList.wow");
//			resultMessageVO.setUrlTitle("목록으로");

		} catch (BizNotEffectedException ene) { // update 구문 수행시 변수들이 유효하지 않을 때
//			resultMessageVO.setResult(false);
//			resultMessageVO.setMessage("등록 실패 notEffected");
//			resultMessageVO.setTitle("등록");
//			resultMessageVO.setUrl("/user/userList.wow");
//			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizDuplicateKeyException ed) {
//			resultMessageVO.setResult(false);
//			resultMessageVO.setMessage("등록 실패 DuplicateKey");
//			resultMessageVO.setTitle("등록");
//			resultMessageVO.setUrl("/user/userList.wow");
//			resultMessageVO.setUrlTitle("목록으로");
		} catch (BizNotFoundException ef) {
			
		}
//		model.addAttribute("resultMessageVO", resultMessageVO);
		return "common/message";
	}
	
	@RequestMapping("/join/cancel.wow")
	public String cancel(SessionStatus sessionStatus) {
		sessionStatus.setComplete();
		return "redirect:/";
	}
	
//	@Inject
//	MailSendService mss;
//	
//	@RequestMapping("/join/mail.wow")
//	@ResponseBody		// ajax 사용시 데이터를 받을 때, return 한 값이 ajax의 데이터로 들어옴,
//	public String mail(@RequestParam("mail") String mail) {
//		String random = mss.sendAuthMail(mail);
//		return random;
//	}
}
